// Generated from /home/erik/Documents/IdeaProjects/APRL/src/main/kotlin/aprl/grammar/AprlLexer.g4 by ANTLR 4.13.1
package aprl.grammar;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class AprlLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		WS=1, VAR=2, VAL=3, EQUAL=4, DOUBLE_EQUAL=5, TRIPLE_EQUAL=6, NOT_EQUAL=7, 
		NOT_DOUBLE_EQUAL=8, LANGLE=9, RANGLE=10, LANGLE_EQUAL=11, RANGLE_EQUAL=12, 
		LPAREN=13, RPAREN=14, LSQUARE=15, RSQUARE=16, LCURLY=17, RCURLY=18, PERIOD=19, 
		COMMA=20, COLON=21, PLUS=22, MINUS=23, ASTERISK=24, DOUBLE_ASTERISK=25, 
		SLASH=26, BACKSLASH=27, PERCENT=28, AND=29, DOUBLE_AND=30, OR=31, DOUBLE_OR=32, 
		XOR=33, SHL=34, SHR=35, USHR=36, NL=37, TRUE=38, FALSE=39, IntegerLiteral=40, 
		FloatLiteral=41, CharLiteral=42, StringLiteral=43, Identifier=44;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"WS", "VAR", "VAL", "EQUAL", "DOUBLE_EQUAL", "TRIPLE_EQUAL", "NOT_EQUAL", 
			"NOT_DOUBLE_EQUAL", "LANGLE", "RANGLE", "LANGLE_EQUAL", "RANGLE_EQUAL", 
			"LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", "PERIOD", 
			"COMMA", "COLON", "PLUS", "MINUS", "ASTERISK", "DOUBLE_ASTERISK", "SLASH", 
			"BACKSLASH", "PERCENT", "AND", "DOUBLE_AND", "OR", "DOUBLE_OR", "XOR", 
			"SHL", "SHR", "USHR", "NL", "TRUE", "FALSE", "IntegerLiteral", "FloatLiteral", 
			"CharLiteral", "StringLiteral", "Identifier"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, "'var'", "'val'", "'='", "'=='", "'==='", "'!='", "'!=='", 
			"'<'", "'>'", "'<='", "'>='", "'('", "')'", "'['", "']'", "'{'", "'}'", 
			"'.'", "','", "':'", "'+'", "'-'", "'*'", "'**'", "'/'", "'\\'", "'%'", 
			"'&'", "'&&'", "'|'", "'||'", "'^'", "'<<'", "'>>'", "'>>>'", null, "'true'", 
			"'false'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "WS", "VAR", "VAL", "EQUAL", "DOUBLE_EQUAL", "TRIPLE_EQUAL", "NOT_EQUAL", 
			"NOT_DOUBLE_EQUAL", "LANGLE", "RANGLE", "LANGLE_EQUAL", "RANGLE_EQUAL", 
			"LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", "PERIOD", 
			"COMMA", "COLON", "PLUS", "MINUS", "ASTERISK", "DOUBLE_ASTERISK", "SLASH", 
			"BACKSLASH", "PERCENT", "AND", "DOUBLE_AND", "OR", "DOUBLE_OR", "XOR", 
			"SHL", "SHR", "USHR", "NL", "TRUE", "FALSE", "IntegerLiteral", "FloatLiteral", 
			"CharLiteral", "StringLiteral", "Identifier"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public AprlLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "AprlLexer.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000,\u00f1\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001"+
		"\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004"+
		"\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007"+
		"\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b"+
		"\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002"+
		"\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002"+
		"\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002"+
		"\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002"+
		"\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002"+
		"\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002"+
		"\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007"+
		"!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007"+
		"&\u0002\'\u0007\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007"+
		"+\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001"+
		"\t\u0001\t\u0001\n\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\u000b"+
		"\u0001\f\u0001\f\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000f\u0001"+
		"\u000f\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0012\u0001"+
		"\u0012\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0015\u0001"+
		"\u0015\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0018\u0001"+
		"\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a\u0001"+
		"\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0001\u001e\u0001\u001e\u0001\u001f\u0001\u001f\u0001\u001f\u0001"+
		" \u0001 \u0001!\u0001!\u0001!\u0001\"\u0001\"\u0001\"\u0001#\u0001#\u0001"+
		"#\u0001#\u0001$\u0003$\u00b8\b$\u0001$\u0001$\u0001%\u0001%\u0001%\u0001"+
		"%\u0001%\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001\'\u0003\'\u00c8"+
		"\b\'\u0001\'\u0004\'\u00cb\b\'\u000b\'\f\'\u00cc\u0001(\u0003(\u00d0\b"+
		"(\u0001(\u0005(\u00d3\b(\n(\f(\u00d6\t(\u0001(\u0001(\u0004(\u00da\b("+
		"\u000b(\f(\u00db\u0001)\u0001)\u0001)\u0001)\u0001*\u0001*\u0005*\u00e4"+
		"\b*\n*\f*\u00e7\t*\u0001*\u0001*\u0001+\u0001+\u0005+\u00ed\b+\n+\f+\u00f0"+
		"\t+\u0000\u0000,\u0001\u0001\u0003\u0002\u0005\u0003\u0007\u0004\t\u0005"+
		"\u000b\u0006\r\u0007\u000f\b\u0011\t\u0013\n\u0015\u000b\u0017\f\u0019"+
		"\r\u001b\u000e\u001d\u000f\u001f\u0010!\u0011#\u0012%\u0013\'\u0014)\u0015"+
		"+\u0016-\u0017/\u00181\u00193\u001a5\u001b7\u001c9\u001d;\u001e=\u001f"+
		"? A!C\"E#G$I%K&M\'O(Q)S*U+W,\u0001\u0000\u0006\u0003\u0000\t\t\f\f  \u0001"+
		"\u0000--\u0001\u000009\u0001\u0000\"\"\u0002\u0000AZaz\u0004\u000009A"+
		"Z__az\u00f8\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0003\u0001\u0000"+
		"\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0007\u0001\u0000"+
		"\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u000b\u0001\u0000\u0000"+
		"\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000\u0000\u0000"+
		"\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000"+
		"\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000"+
		"\u0000\u0019\u0001\u0000\u0000\u0000\u0000\u001b\u0001\u0000\u0000\u0000"+
		"\u0000\u001d\u0001\u0000\u0000\u0000\u0000\u001f\u0001\u0000\u0000\u0000"+
		"\u0000!\u0001\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000%"+
		"\u0001\u0000\u0000\u0000\u0000\'\u0001\u0000\u0000\u0000\u0000)\u0001"+
		"\u0000\u0000\u0000\u0000+\u0001\u0000\u0000\u0000\u0000-\u0001\u0000\u0000"+
		"\u0000\u0000/\u0001\u0000\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u0000"+
		"3\u0001\u0000\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u00007\u0001"+
		"\u0000\u0000\u0000\u00009\u0001\u0000\u0000\u0000\u0000;\u0001\u0000\u0000"+
		"\u0000\u0000=\u0001\u0000\u0000\u0000\u0000?\u0001\u0000\u0000\u0000\u0000"+
		"A\u0001\u0000\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000E\u0001"+
		"\u0000\u0000\u0000\u0000G\u0001\u0000\u0000\u0000\u0000I\u0001\u0000\u0000"+
		"\u0000\u0000K\u0001\u0000\u0000\u0000\u0000M\u0001\u0000\u0000\u0000\u0000"+
		"O\u0001\u0000\u0000\u0000\u0000Q\u0001\u0000\u0000\u0000\u0000S\u0001"+
		"\u0000\u0000\u0000\u0000U\u0001\u0000\u0000\u0000\u0000W\u0001\u0000\u0000"+
		"\u0000\u0001Y\u0001\u0000\u0000\u0000\u0003]\u0001\u0000\u0000\u0000\u0005"+
		"a\u0001\u0000\u0000\u0000\u0007e\u0001\u0000\u0000\u0000\tg\u0001\u0000"+
		"\u0000\u0000\u000bj\u0001\u0000\u0000\u0000\rn\u0001\u0000\u0000\u0000"+
		"\u000fq\u0001\u0000\u0000\u0000\u0011u\u0001\u0000\u0000\u0000\u0013w"+
		"\u0001\u0000\u0000\u0000\u0015y\u0001\u0000\u0000\u0000\u0017|\u0001\u0000"+
		"\u0000\u0000\u0019\u007f\u0001\u0000\u0000\u0000\u001b\u0081\u0001\u0000"+
		"\u0000\u0000\u001d\u0083\u0001\u0000\u0000\u0000\u001f\u0085\u0001\u0000"+
		"\u0000\u0000!\u0087\u0001\u0000\u0000\u0000#\u0089\u0001\u0000\u0000\u0000"+
		"%\u008b\u0001\u0000\u0000\u0000\'\u008d\u0001\u0000\u0000\u0000)\u008f"+
		"\u0001\u0000\u0000\u0000+\u0091\u0001\u0000\u0000\u0000-\u0093\u0001\u0000"+
		"\u0000\u0000/\u0095\u0001\u0000\u0000\u00001\u0097\u0001\u0000\u0000\u0000"+
		"3\u009a\u0001\u0000\u0000\u00005\u009c\u0001\u0000\u0000\u00007\u009e"+
		"\u0001\u0000\u0000\u00009\u00a0\u0001\u0000\u0000\u0000;\u00a2\u0001\u0000"+
		"\u0000\u0000=\u00a5\u0001\u0000\u0000\u0000?\u00a7\u0001\u0000\u0000\u0000"+
		"A\u00aa\u0001\u0000\u0000\u0000C\u00ac\u0001\u0000\u0000\u0000E\u00af"+
		"\u0001\u0000\u0000\u0000G\u00b2\u0001\u0000\u0000\u0000I\u00b7\u0001\u0000"+
		"\u0000\u0000K\u00bb\u0001\u0000\u0000\u0000M\u00c0\u0001\u0000\u0000\u0000"+
		"O\u00c7\u0001\u0000\u0000\u0000Q\u00cf\u0001\u0000\u0000\u0000S\u00dd"+
		"\u0001\u0000\u0000\u0000U\u00e1\u0001\u0000\u0000\u0000W\u00ea\u0001\u0000"+
		"\u0000\u0000YZ\u0007\u0000\u0000\u0000Z[\u0001\u0000\u0000\u0000[\\\u0006"+
		"\u0000\u0000\u0000\\\u0002\u0001\u0000\u0000\u0000]^\u0005v\u0000\u0000"+
		"^_\u0005a\u0000\u0000_`\u0005r\u0000\u0000`\u0004\u0001\u0000\u0000\u0000"+
		"ab\u0005v\u0000\u0000bc\u0005a\u0000\u0000cd\u0005l\u0000\u0000d\u0006"+
		"\u0001\u0000\u0000\u0000ef\u0005=\u0000\u0000f\b\u0001\u0000\u0000\u0000"+
		"gh\u0005=\u0000\u0000hi\u0005=\u0000\u0000i\n\u0001\u0000\u0000\u0000"+
		"jk\u0005=\u0000\u0000kl\u0005=\u0000\u0000lm\u0005=\u0000\u0000m\f\u0001"+
		"\u0000\u0000\u0000no\u0005!\u0000\u0000op\u0005=\u0000\u0000p\u000e\u0001"+
		"\u0000\u0000\u0000qr\u0005!\u0000\u0000rs\u0005=\u0000\u0000st\u0005="+
		"\u0000\u0000t\u0010\u0001\u0000\u0000\u0000uv\u0005<\u0000\u0000v\u0012"+
		"\u0001\u0000\u0000\u0000wx\u0005>\u0000\u0000x\u0014\u0001\u0000\u0000"+
		"\u0000yz\u0005<\u0000\u0000z{\u0005=\u0000\u0000{\u0016\u0001\u0000\u0000"+
		"\u0000|}\u0005>\u0000\u0000}~\u0005=\u0000\u0000~\u0018\u0001\u0000\u0000"+
		"\u0000\u007f\u0080\u0005(\u0000\u0000\u0080\u001a\u0001\u0000\u0000\u0000"+
		"\u0081\u0082\u0005)\u0000\u0000\u0082\u001c\u0001\u0000\u0000\u0000\u0083"+
		"\u0084\u0005[\u0000\u0000\u0084\u001e\u0001\u0000\u0000\u0000\u0085\u0086"+
		"\u0005]\u0000\u0000\u0086 \u0001\u0000\u0000\u0000\u0087\u0088\u0005{"+
		"\u0000\u0000\u0088\"\u0001\u0000\u0000\u0000\u0089\u008a\u0005}\u0000"+
		"\u0000\u008a$\u0001\u0000\u0000\u0000\u008b\u008c\u0005.\u0000\u0000\u008c"+
		"&\u0001\u0000\u0000\u0000\u008d\u008e\u0005,\u0000\u0000\u008e(\u0001"+
		"\u0000\u0000\u0000\u008f\u0090\u0005:\u0000\u0000\u0090*\u0001\u0000\u0000"+
		"\u0000\u0091\u0092\u0005+\u0000\u0000\u0092,\u0001\u0000\u0000\u0000\u0093"+
		"\u0094\u0005-\u0000\u0000\u0094.\u0001\u0000\u0000\u0000\u0095\u0096\u0005"+
		"*\u0000\u0000\u00960\u0001\u0000\u0000\u0000\u0097\u0098\u0005*\u0000"+
		"\u0000\u0098\u0099\u0005*\u0000\u0000\u00992\u0001\u0000\u0000\u0000\u009a"+
		"\u009b\u0005/\u0000\u0000\u009b4\u0001\u0000\u0000\u0000\u009c\u009d\u0005"+
		"\\\u0000\u0000\u009d6\u0001\u0000\u0000\u0000\u009e\u009f\u0005%\u0000"+
		"\u0000\u009f8\u0001\u0000\u0000\u0000\u00a0\u00a1\u0005&\u0000\u0000\u00a1"+
		":\u0001\u0000\u0000\u0000\u00a2\u00a3\u0005&\u0000\u0000\u00a3\u00a4\u0005"+
		"&\u0000\u0000\u00a4<\u0001\u0000\u0000\u0000\u00a5\u00a6\u0005|\u0000"+
		"\u0000\u00a6>\u0001\u0000\u0000\u0000\u00a7\u00a8\u0005|\u0000\u0000\u00a8"+
		"\u00a9\u0005|\u0000\u0000\u00a9@\u0001\u0000\u0000\u0000\u00aa\u00ab\u0005"+
		"^\u0000\u0000\u00abB\u0001\u0000\u0000\u0000\u00ac\u00ad\u0005<\u0000"+
		"\u0000\u00ad\u00ae\u0005<\u0000\u0000\u00aeD\u0001\u0000\u0000\u0000\u00af"+
		"\u00b0\u0005>\u0000\u0000\u00b0\u00b1\u0005>\u0000\u0000\u00b1F\u0001"+
		"\u0000\u0000\u0000\u00b2\u00b3\u0005>\u0000\u0000\u00b3\u00b4\u0005>\u0000"+
		"\u0000\u00b4\u00b5\u0005>\u0000\u0000\u00b5H\u0001\u0000\u0000\u0000\u00b6"+
		"\u00b8\u0005\r\u0000\u0000\u00b7\u00b6\u0001\u0000\u0000\u0000\u00b7\u00b8"+
		"\u0001\u0000\u0000\u0000\u00b8\u00b9\u0001\u0000\u0000\u0000\u00b9\u00ba"+
		"\u0005\n\u0000\u0000\u00baJ\u0001\u0000\u0000\u0000\u00bb\u00bc\u0005"+
		"t\u0000\u0000\u00bc\u00bd\u0005r\u0000\u0000\u00bd\u00be\u0005u\u0000"+
		"\u0000\u00be\u00bf\u0005e\u0000\u0000\u00bfL\u0001\u0000\u0000\u0000\u00c0"+
		"\u00c1\u0005f\u0000\u0000\u00c1\u00c2\u0005a\u0000\u0000\u00c2\u00c3\u0005"+
		"l\u0000\u0000\u00c3\u00c4\u0005s\u0000\u0000\u00c4\u00c5\u0005e\u0000"+
		"\u0000\u00c5N\u0001\u0000\u0000\u0000\u00c6\u00c8\u0007\u0001\u0000\u0000"+
		"\u00c7\u00c6\u0001\u0000\u0000\u0000\u00c7\u00c8\u0001\u0000\u0000\u0000"+
		"\u00c8\u00ca\u0001\u0000\u0000\u0000\u00c9\u00cb\u0007\u0002\u0000\u0000"+
		"\u00ca\u00c9\u0001\u0000\u0000\u0000\u00cb\u00cc\u0001\u0000\u0000\u0000"+
		"\u00cc\u00ca\u0001\u0000\u0000\u0000\u00cc\u00cd\u0001\u0000\u0000\u0000"+
		"\u00cdP\u0001\u0000\u0000\u0000\u00ce\u00d0\u0007\u0001\u0000\u0000\u00cf"+
		"\u00ce\u0001\u0000\u0000\u0000\u00cf\u00d0\u0001\u0000\u0000\u0000\u00d0"+
		"\u00d4\u0001\u0000\u0000\u0000\u00d1\u00d3\u0007\u0002\u0000\u0000\u00d2"+
		"\u00d1\u0001\u0000\u0000\u0000\u00d3\u00d6\u0001\u0000\u0000\u0000\u00d4"+
		"\u00d2\u0001\u0000\u0000\u0000\u00d4\u00d5\u0001\u0000\u0000\u0000\u00d5"+
		"\u00d7\u0001\u0000\u0000\u0000\u00d6\u00d4\u0001\u0000\u0000\u0000\u00d7"+
		"\u00d9\u0005.\u0000\u0000\u00d8\u00da\u0007\u0002\u0000\u0000\u00d9\u00d8"+
		"\u0001\u0000\u0000\u0000\u00da\u00db\u0001\u0000\u0000\u0000\u00db\u00d9"+
		"\u0001\u0000\u0000\u0000\u00db\u00dc\u0001\u0000\u0000\u0000\u00dcR\u0001"+
		"\u0000\u0000\u0000\u00dd\u00de\u0005\'\u0000\u0000\u00de\u00df\t\u0000"+
		"\u0000\u0000\u00df\u00e0\u0005\'\u0000\u0000\u00e0T\u0001\u0000\u0000"+
		"\u0000\u00e1\u00e5\u0005\"\u0000\u0000\u00e2\u00e4\b\u0003\u0000\u0000"+
		"\u00e3\u00e2\u0001\u0000\u0000\u0000\u00e4\u00e7\u0001\u0000\u0000\u0000"+
		"\u00e5\u00e3\u0001\u0000\u0000\u0000\u00e5\u00e6\u0001\u0000\u0000\u0000"+
		"\u00e6\u00e8\u0001\u0000\u0000\u0000\u00e7\u00e5\u0001\u0000\u0000\u0000"+
		"\u00e8\u00e9\u0005\"\u0000\u0000\u00e9V\u0001\u0000\u0000\u0000\u00ea"+
		"\u00ee\u0007\u0004\u0000\u0000\u00eb\u00ed\u0007\u0005\u0000\u0000\u00ec"+
		"\u00eb\u0001\u0000\u0000\u0000\u00ed\u00f0\u0001\u0000\u0000\u0000\u00ee"+
		"\u00ec\u0001\u0000\u0000\u0000\u00ee\u00ef\u0001\u0000\u0000\u0000\u00ef"+
		"X\u0001\u0000\u0000\u0000\u00f0\u00ee\u0001\u0000\u0000\u0000\t\u0000"+
		"\u00b7\u00c7\u00cc\u00cf\u00d4\u00db\u00e5\u00ee\u0001\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}